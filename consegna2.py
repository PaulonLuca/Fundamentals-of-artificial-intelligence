# -*- coding: utf-8 -*-
"""Consegna2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p8qmMj62XyreLbpZ5TlfG3omMVzzpyfX
"""

#esercizio 2

import networkx as nx

def romania():
 
	node_list = ["Bucharest","Giurgiu","Urziceni","Hirsova","Eforie","Neamt","Oradea","Zerind","Arad","Timisoara","Lugoj","Mehadia","Dobreta","Craiova","Sibiu","Fagaras","Pitesti","Rimnicu Vilcea","Vaslui","Iasi"] 
 
	graph=nx.Graph()
	
	for i in node_list:
		graph.add_node(i, percorso=[], visitato=False, f=0)
	
	graph.add_edge("Arad","Zerind", weight=75)
	graph.add_edge("Arad","Timisoara", weight=118)
	graph.add_edge("Arad","Sibiu", weight=140)
	graph.add_edge("Zerind","Oradea", weight=71)
	graph.add_edge("Mehadia","Lugoj", weight=70)
	graph.add_edge("Mehadia","Dobreta", weight=75)
	graph.add_edge("Craiova","Dobreta", weight=120)
	graph.add_edge("Craiova","Rimnicu Vilcea", weight=146)
	graph.add_edge("Craiova","Pitesti", weight=138)
	graph.add_edge("Pitesti","Rimnicu Vilcea", weight=97)
	graph.add_edge("Pitesti","Bucharest", weight=101)
	graph.add_edge("Timisoara","Lugoj", weight=111)
	graph.add_edge("Sibiu","Fagaras", weight=99)
	graph.add_edge("Bucharest","Fagaras", weight=211)
	graph.add_edge("Bucharest","Giurgiu", weight=90)
	graph.add_edge("Bucharest","Urziceni", weight=85)
	graph.add_edge("Vaslui","Urziceni", weight=142)
	graph.add_edge("Vaslui","Iasi", weight=92)
	graph.add_edge("Neamt","Iasi", weight=87)
	graph.add_edge("Hirsova","Urziceni", weight=98)
	graph.add_edge("Hirsova","Eforie", weight=86)
	graph.add_edge("Sibiu","Rimnicu Vilcea", weight=80)
	graph.add_edge("Sibiu","Oradea", weight=151)

	return graph

def ampiezza(G,start,end):

  if start not in G or end not in G:#se nodi non appartengono al grafo allora percorso vuoto
    return []
  
  if len(G.nodes)==0:#se in grafo è nullo, cioè non ha nodi allora percorso vuoto
    return []

  nodi_aperti=[start]

  while len(nodi_aperti)>0:

    node=nodi_aperti.pop(0)
    G.nodes[node]['visitato']=True

    if node==end:
      G.nodes[end]['percorso'].append(node)
      return G.nodes[end]['percorso']

    vicini=list(G.neighbors(node))

    for n in vicini:
      if G.nodes[n]['visitato']==False and n not in nodi_aperti:
        G.nodes[n]['percorso'].extend(G.nodes[node]['percorso'])
        G.nodes[n]['percorso'].append(node)        
        nodi_aperti.append(n)
      #fai aggiornamento pesi per trovare percorso ottimo

  return []  #se non trovo una soluzione allora il grafo non è connesso

'''
print(ampiezza(romania(),"pippo","Arad"))#solo end no start
print(ampiezza(romania(),"Urziceni","as"))#solo start no end
print(ampiezza(romania(),"Pippo","Pluto"))#nè start nè end
print(ampiezza(romania(),"Sibiu","Iasi"))
print(ampiezza(romania(),"Arad","Neamt"))
print(ampiezza(romania(),"Dobreta","Eforie"))
print(ampiezza(romania(),"Oradea","Timisoara"))
print(ampiezza(romania(),"Bucharest","Lugoj"))
print(ampiezza(nx.Graph(),"Bucharest","Lugoj"))#grafo vuoto
ampiezza(romania(),"Arad","Arad")#stessa città
'''

print(ampiezza(romania(),"Arad","Neamt"))#solo end no start
print(ampiezza(romania(),"Eforie","Oradea"))#solo start no end
print(ampiezza(romania(),"Dobreta","Giurgiu"))#nè start nè end
print(ampiezza(romania(),"Vaslui","Zerind"))
print(ampiezza(romania(),"Fagaras","Lugoj"))
print(ampiezza(romania(),"Rimnicu Vilcea","Sibiu"))
print(ampiezza(romania(),"Sibiu","Sibiu"))
print(ampiezza(romania(),"Lugoj","Roma"))
print(ampiezza(romania(),"Palermo","Rovigo"))

#esercizio 3

#eurustica
def h1():

	dict={}

	dict["Bucharest"] = 0
	dict["Giurgiu"] =77
	dict["Urziceni"] = 80
	dict["Hirsova"] = 151
	dict["Eforie"] = 161
	dict["Neamt"] = 234
	dict["Oradea"] = 380
	dict["Zerind"] = 374
	dict["Arad"] = 366
	dict["Timisoara"] = 329
	dict["Lugoj"] = 244
	dict["Mehadia"] = 241
	dict["Dobreta"] = 242
	dict["Craiova"] = 160
	dict["Sibiu"] = 253
	dict["Fagaras"] = 176
	dict["Pitesti"] = 100
	dict["Rimnicu Vilcea"] = 193
	dict["Vaslui"] = 199
	dict["Iasi"] = 226
	
	return dict

def aggiornaPesiNodiChiusi(G,cur,neighbor):
  if (G.nodes[neighbor]['f']>G.nodes[cur]['f']+(G.get_edge_data(cur,neighbor))['weight']):
    G.nodes[neighbor]['percorso']=G.nodes[cur]['percorso']
    G.nodes[neighbor]['percorso'].append(cur)
    G.nodes[neighbor]['f']=G.nodes[cur]['f']+(G.get_edge_data(cur,neighbor))['weight']

    #modifico i vicini del neighbor passato
    for vicino in G.neighbors(neighbor):
      if G.nodes[vicino]['visitato']==False:
        aggiornaPesiNodiChiusi(G,neighbor,vicino)


def astar(grafo,start,end,euristica):

  if start not in grafo or end not in grafo:#se nodi non appartengono al grafo allora percorso vuoto
    return [],0
  
  if len(grafo.nodes)==0:#se in grafo è nullo, cioè non ha nodi allora percorso vuoto
    return [],0

  nodi_aperti=[start]

  while len(nodi_aperti)>0:

    #individuo il nodo con f(n)=g(n)+h(n) minima
    node_fn_minima=nodi_aperti[0]
    for na in nodi_aperti:
      if grafo.nodes[na]['f']+euristica[na]<grafo.nodes[node_fn_minima]['f']+euristica[node_fn_minima]:
        node_fn_minima=na
    
    #rimozione del nodo con f(n) minima dalla lista di nodi aperti e visita
    grafo.nodes[node_fn_minima]['visitato']=True
    nodi_aperti.pop(nodi_aperti.index(node_fn_minima))
    
    #se il nodo è il mio goal ritorno il nodo con il percorso ed il peso del percorso
    if node_fn_minima==end:
      grafo.nodes[end]['percorso'].append(node_fn_minima)
      return grafo.nodes[end]['percorso'],grafo.nodes[end]['f']

    vicini=list(grafo.neighbors(node_fn_minima))

    for n in vicini:
       if grafo.nodes[n]['visitato']==False and n not in nodi_aperti:
         grafo.nodes[n]['percorso'].extend(grafo.nodes[node_fn_minima]['percorso'])
         grafo.nodes[n]['percorso'].append(node_fn_minima) 
         grafo.nodes[n]['f']=grafo.nodes[node_fn_minima]['f']+(grafo.get_edge_data(node_fn_minima,n))['weight']  #il percorso totale è quello corrente del nodo con fn_minima + quello per arrivare dal nodo con fn minima al vicino
         nodi_aperti.append(n)

       elif grafo.nodes[n]['visitato']==False and n in nodi_aperti and (grafo.nodes[n]['f']>grafo.nodes[node_fn_minima]['f']+(grafo.get_edge_data(node_fn_minima,n))['weight']):
          grafo.nodes[n]['percorso']=grafo.nodes[node_fn_minima]['percorso']
          grafo.nodes[n]['percorso'].append(node_fn_minima)
          grafo.nodes[n]['f']=grafo.nodes[node_fn_minima]['f']+(grafo.get_edge_data(node_fn_minima,n))['weight']

       elif grafo.nodes[n]['visitato']==True:
          aggiornaPesiNodiChiusi(grafo,node_fn_minima,n)
          
  return [],0

diz=h1()
'''
print(astar(romania(),"Arad","Bucharest",diz))#esempio prof
print(astar(romania(),"Arad","pippo",diz))#ok start no end
print(astar(romania(),"pluto","Iasi",diz))#no end ok start
print(astar(romania(),"anna","pluto",diz))#nè start nè end
print(astar(romania(),"Bucharest","Bucharest",diz))#stessa città, e percorso nullo
print(astar(romania(),"Oradea","Bucharest",diz))
print(astar(romania(),"Neamt","Bucharest",diz))
astar(romania(),"Lugoj","Bucharest",diz)
'''

print(astar(romania(),"Arad","Neamt",diz))#esempio prof
print(astar(romania(),"Eforie","Oradea",diz))#ok start no end
print(astar(romania(),"Dobreta","Giurgiu",diz))#no end ok start
print(astar(romania(),"Vaslui","Zerind",diz))#nè start nè end
print(astar(romania(),"Fagaras","Lugoj",diz))#esempio prof
print(astar(romania(),"Rimnicu Vilcea","Sibiu",diz))#ok start no end
print(astar(romania(),"Sibiu","Sibiu",diz))#no end ok start
print(astar(romania(),"Lugoj","Roma",diz))#nè start nè end
print(astar(romania(),"Palermo","Rovigo",diz))#nè start nè end
astar(romania(),"Craiova","Bucharest",diz)