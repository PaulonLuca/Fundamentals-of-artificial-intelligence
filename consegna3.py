# -*- coding: utf-8 -*-
"""Consegna3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcycO0_VUfcxzZJocoBfJwHbGs1zNY3I
"""

!pip install python-constraint

from constraint import *

#esercizio 1

def sistema3():

  problem=Problem()

  problem.addVariable('x',[13,12,34])
  problem.addVariable('y',[40,57,76])
  problem.addVariable('z',[6,8,20])

  problem.addConstraint(lambda a,b: a<b,('x','y'))
  problem.addConstraint(lambda a,b,c: a+b+c<65,('x','y','z'))

  return problem.getSolution()


print(sistema3())

#esercizio 2

import networkx as nx

def australia():

  G=nx.Graph()

  nodes=['WA','NT','Q','NSW','V','SA','T']

  G.add_nodes_from(nodes)

  G.add_edge('WA','NT')
  G.add_edge('WA','SA')
  G.add_edge('SA','NT')
  G.add_edge('Q','NT')
  G.add_edge('SA','Q')
  G.add_edge('Q','NSW')
  G.add_edge('SA','NSW')
  G.add_edge('SA','V')
  G.add_edge('V','NSW')

  return G


def grafo_vincoli(grafo):

  if len(grafo.nodes())==0:
    return {}

  problem=Problem()

  domain=['rosso','verde','blu']

  for n in grafo.nodes():
    problem.addVariable(n,domain)

  for n in grafo.nodes():
    for v in grafo.neighbors(n):
      problem.addConstraint(lambda a,b: a!=b,(n,v))

  return problem.getSolution()

print(grafo_vincoli(australia()))
print(grafo_vincoli(nx.Graph()))

#esercizio 3

def nqueen(n):
  
  #if n<=0 or (n>=2 and n<=3):
    #return {}
  problem=Problem()

  domain=[]
  for i in range(n):
    domain.append(i)

  for i in range(n):
    problem.addVariable(i,domain)
  
  for i in range(n):
    for j in range(n):
      if i!=j:
        problem.addConstraint(lambda a,b: a!=b, (i,j))
        problem.addConstraint(lambda a,b,I=i,J=j: a!=b+(J-I) , (i,j))
        problem.addConstraint(lambda a,b,I=i,J=j: a!=b-(J-I) , (i,j))
  
  return problem.getSolution()

print(nqueen(20))
print(nqueen(8))
print(nqueen(7))
print(nqueen(6))
print(nqueen(5))
print(nqueen(4))
print(nqueen(1))

print(nqueen(2))
print(nqueen(3))
print(nqueen(0))
print(nqueen(-1))

